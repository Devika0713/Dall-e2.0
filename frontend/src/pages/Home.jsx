/* eslint-disable react/prop-types */
/* eslint-disable no-unused-vars */
import React, { useState, useEffect } from "react";
import { Card, Loader, FormField } from "../components";

const RenderCards = ({ data, title }) => {
  // this code checks if data exists and has elements in it(optional chaining -"?."  use ?. to access properties of an object safely.
  // If the property exists, its value is returned; otherwise, undefined is returned without throwing an error.).
  // If it does, it maps over the data array and renders a Card component for each element in the array,
  // passing the properties of each post object as props to the Card component.
  // If data is null, undefined, or an empty array, the title passed dynamically will be returned.
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }
  return (
    <h2 className="mt-2 font-bold text-sky-950 text-[20px] uppercase">
      {title}
    </h2>
  );
};

// generic react functional component
const Home = () => {
  const [loading, setLoading] = useState(false);
  const [AllPosts, setAllPosts] = useState(null);
  const [searchText, setsearchText] = useState("");
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);
      try {
        const response = await fetch("http://localhost:8080/api/v1/post", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          const result = await response.json();
          setAllPosts(result.data.reverse());
        }
      } catch (error) {
        alert(error);
      } finally {
        setLoading(false);
      }
    };
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setsearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = AllPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  return (
    <section className="max-w-7xl mx-auto ">
      <div>
        <h1 className="font-extrabold text-[30px] text-slate-800">
          The Community Showcase
        </h1>
        <p className="mt-2 font-semibold text-slate-600 text-[20px] max-w-full">
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E AI
        </p>
      </div>

      <div className="mt-6">
        <FormField
          labelName="Search Posts"
          type="text"
          name="text"
          placeholder="Search posts"
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-3">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-slate-600 text-[20px] mb-2">
                {" "}
                Showing results for{" "}
                <span className="text-slate-800">{searchText}</span>
              </h2>
            )}
            {/* usually go for css flex box but when grids are needed only then use grids */}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                /* If you are searching for new posts */
                <RenderCards
                  data={searchedResults}
                  title="No search results found"
                />
              ) : (
                /* Else return all the available posts */
                <RenderCards data={AllPosts} title="No posts found" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
